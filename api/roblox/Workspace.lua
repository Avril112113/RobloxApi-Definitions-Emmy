-- Generated by robloxPageToEmmy.py

--- The Workspace is the service in which any objects that are to be rendered in the 3D world exist. Objects not descending from Workspace will not be rendered or physically interact with the world.
--- What does the Workspace do?
--- The core job of the Workspace is to hold objects that exist in the 3D world, BasePart|BaseParts and Attachment|Attachments. Whilst such objects are descendant of Workspace, they will be active. For BaseParts this means they will be rendered, and physically interact with other parts and the world. For Attachments this means objects adorned to them, such as ParticleEmitter|ParticleEmitters, Beam|Beams and BillboardGui|BillboardGuis will render.
--- Understanding this behavior is important, as it means objects can be removed from the Workspace when they are not needed. For example, map Model|Models can be removed from the Workspace when a different map is being played on. Objects that are not immediately needed in the Workspace are generally stored in ReplicatedStorage or ServerStorage.
--- In its role as the holder of active 3D objects, Workspace includes a number of useful functions related to parts, their positions and joints between them. Commonly used are the Workspace’s raycasting functions, such as Workspace/FindPartOnRay.
--- Accessing the Workspace
--- The Workspace can be accessed several ways, all of which are valid.
--- workspace -- a global variable
--- game.Workspace -- a property of the DataModel
--- game:GetService("Workspace") -- workspace is a service
--- 
--- Notes
--- 
--- Objects that require adornment, such as ParticleEmitters and BillboardGuis will be adorned to the 0, 0, 0 position when adorned to the Workspace (parented to it without an adornee otherwise being set)
--- The Model/MakeJoints and Model/BreakJoints functions inherited from the Model class are overridden by the Workspace’s own Workspace/MakeJoints and Workspace/BreakJoints functions, which can only be used in plugins
--- It is impossible to delete the Workspace
--- The Workspace will also clean up BaseParts that fall beneath Workspace/FallenPartsDestroyHeight
--- A client’s current Camera object can be accessed using the Workspace/CurrentCamera property
--- The Terrain object can be accessed using the Workspace/Terrain property
--- 
---@class Workspace
Workspace = {
	-- Properties --
	--- Determines whether assets created by other uses can be sold in the game.
	--- Tags: NotReplicated
	---@type boolean
	AllowThirdPartySales=nil,
	--- Tags: NotScriptable
	---@type AutoJointsMode
	AutoJointsMode=nil,
	--- The Camera object being used by the local player.
	--- Tags: NotReplicated
	---@type Camera
	CurrentCamera=nil,
	--- The amount of time, in seconds, that the game has been running.
	--- Tags: NotReplicated
	---@type number
	DistributedGameTime=nil,
	--- Determines the height at which falling BasePart|BaseParts (and their ancestor Model|Models) are destroyed
	---@type number
	FallenPartsDestroyHeight=nil,
	--- Determines whether changes made from the client will replicate to the server or not.
	---@type boolean
	FilteringEnabled=nil,
	--- Determines the acceleration due to gravity applied to falling BaseParts.
	---@type number
	Gravity=nil,
	--- Whether network streaming is enabled for the place
	---@type boolean
	StreamingEnabled=nil,
	--- Minimum distance that parts will be streamed to players with high priority
	--- Tags: NotScriptable
	---@type number
	StreamingMinRadius=nil,
	--- Tags: NotScriptable
	---@type StreamingPauseMode
	StreamingPauseMode=nil,
	--- Maximum distance that parts will be streamed to players
	--- Tags: NotScriptable
	---@type number
	StreamingTargetRadius=nil,
	--- Tags: NotReplicated, NotScriptable
	---@type boolean
	TemporaryLegacyPhysicsSolverOverride=nil,
	--- A reference to the Terrain object parented to the Workspace
	--- Tags: ReadOnly, NotReplicated
	---@type Instance
	Terrain=nil
}

-- Functions --
--- Goes through all BaseParts given, breaking any joints connected to these parts.
---@param objects Instance[]
---@return void
function Workspace:BreakJoints(objects) end

--- Returns true if the game has the PGS Physics solver enabled.
---@return boolean
function Workspace:ExperimentalSolverIsEnabled() end

--- Returns the first BasePart intersecting with the given DataType/Ray.
---@param ray Ray
---@param ignoreDescendantsInstance Instance
---@param terrainCellsAreCubes boolean
---@param ignoreWater boolean
---@return any[]
function Workspace:FindPartOnRay(ray, ignoreDescendantsInstance, terrainCellsAreCubes, ignoreWater) end

--- Returns the first BasePart intersecting with the given DataType/Ray that isn’t in, or a descendant of an object in, the given ignore list
---@param ray Ray
---@param ignoreDescendantsTable Instance[]
---@param terrainCellsAreCubes boolean
---@param ignoreWater boolean
---@return any[]
function Workspace:FindPartOnRayWithIgnoreList(ray, ignoreDescendantsTable, terrainCellsAreCubes, ignoreWater) end

--- Returns the first BasePart intersecting with the given DataType/Ray that is in, or is a descendant of an object in, the given white-list
---@param ray Ray
---@param whitelistDescendantsTable Instance[]
---@param ignoreWater boolean
---@return any[]
function Workspace:FindPartOnRayWithWhitelist(ray, whitelistDescendantsTable, ignoreWater) end

--- Returns an array of BaseParts in the given DataType/Region3.
---@param region Region3
---@param ignoreDescendantsInstance Instance
---@param maxParts number
---@return Instance[]
function Workspace:FindPartsInRegion3(region, ignoreDescendantsInstance, maxParts) end

--- Returns an array of BaseParts in the given DataType/Region3 that aren’t in, or a descendant of an entry in, the given IgnoreList.
---@param region Region3
---@param ignoreDescendantsTable Instance[]
---@param maxParts number
---@return Instance[]
function Workspace:FindPartsInRegion3WithIgnoreList(region, ignoreDescendantsTable, maxParts) end

--- Returns an array of BaseParts in the given DataType/Region3 that are in, or descendant of an object in, a given white list.
---@param region Region3
---@param whitelistDescendantsTable Instance[]
---@param maxParts number
---@return Instance[]
function Workspace:FindPartsInRegion3WithWhiteList(region, whitelistDescendantsTable, maxParts) end

--- Returns the number of BaseParts that are deemed physically active, due to being recently under the influence of physics.
---@return number
function Workspace:GetNumAwakeParts() end

--- Returns an integer, between 0 and 100, representing the percentage of real-time that physics simulation is currently being throttled to.
---@return number
function Workspace:GetPhysicsThrottling() end

--- Returns the number of frames per second that physics is currently being simulated at.
---@return number
function Workspace:GetRealPhysicsFPS() end

--- Returns a bool stating if no BaseParts are in the given DataType/Region3.
---@param region Region3
---@param ignoreDescendentsInstance Instance
---@return boolean
function Workspace:IsRegion3Empty(region, ignoreDescendentsInstance) end

--- Returns a bool stating if no BaseParts are in the given DataType/Region3, ignoring any BaseParts that are in, or descend from objects in, the ignore list given.
---@param region Region3
---@param ignoreDescendentsTable Instance[]
---@return boolean
function Workspace:IsRegion3EmptyWithIgnoreList(region, ignoreDescendentsTable) end

--- Creates joints between the specified BasePart|Parts and any touching parts depending on the parts’ surfaces and the specified joint creation mode.
---@param objects Instance[]
---@param jointType JointCreationMode
---@return void
function Workspace:JoinToOutsiders(objects, jointType) end

--- Goes through all BaseParts given. If any part’s side has a Enum/SurfaceType that can make a joint it will create a joint with any adjacent parts.
---@param objects Instance[]
---@return void
function Workspace:MakeJoints(objects) end

--- Returns true if the game has the PGS Physics solver enabled.
---@return boolean
function Workspace:PGSIsEnabled() end

--- Determines whether physics throttling is enabled
---@param value boolean
---@return void
function Workspace:SetPhysicsThrottleEnabled(value) end

--- Breaks all joints between the specified BaseParts and other BaseParts.
---@param objects Instance[]
---@return void
function Workspace:UnjoinFromOutsiders(objects) end

--- Positions and zooms the Workspace/CurrentCamera to show the extent of BaseParts currently in the Workspace.
---@return void
function Workspace:ZoomToExtents() end

-- Events --