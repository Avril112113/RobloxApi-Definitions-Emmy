import os


def getEnums():
	with open("enumList.txt") as f:
		enumList = f.read()
	enums = {}
	for line in enumList.splitlines():
		segments = line.split(".")
		# Enum.ENUM_NAME	 .ENUM_VALUE_NAME
		if enums.get(segments[1]) is None:
			enums[segments[1]] = []
		enums[segments[1]].append(segments[2])
	return enums


def getLuaCode():
	enums = getEnums()

	enumsCode = ",\n\t".join([
		f"---@class {name} : EnumItem @ Really is type `Enum`\n\t"
		f"{name}={{\n\t\t"
		f"GetEnumItems=_Enum.GetEnumItems,\n\t\t"
		+ ",\n\t\t".join([
			f"{enum}={{Name=\"{enum}\",Value={_enums.index(enum)},EnumType=_Enum}}"
			for enum in _enums
		]) +
		"\n\t}"
		for name, _enums in enums.items()
	])
	return f"""
	-- Generated by {os.path.basename(__file__)}
	-- NOTE: the way the class's are defined are done for typing

	---@language Lua
	local codeForEnumList = [[
	for _, enum in pairs(Enum:GetEnums()) do
		for _, v in pairs(enum:GetEnumItems()) do
			print(v)
		end
	end
	]]

	---@class EnumItem
	local _EnumItem = {{
		---@type string
		Name=nil,
		---@type number
		Value=nil,
		---@type Enum
		EnumType=nil
	}}
	---@class Enum
	local _Enum = {{}}
	---@return EnumItem[]
	function _Enum:GetEnumItems() end

	Enum = {{
		{enumsCode}
	}}
	---@return Enum[]
	function Enum:GetEnums() end""".strip()


if __name__ == "__main__":
	luaCode = getLuaCode()
	with open("api/Enum.lua", "w") as f:
		f.write(luaCode)
